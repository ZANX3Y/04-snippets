{
    "Bubble Sort": {
        "prefix": "04-cpp-bubble-sort",
        "body": [
            "void bubbleSort(int arr[], int n) {",
            "    for (int i = 0; i < n - 1; i++) {",
            "        for (int j = 0; j < n - i - 1; j++) {",
            "            if (arr[j] > arr[j + 1]) {",
            "                int temp = arr[j];",
            "                arr[j] = arr[j + 1];",
            "                arr[j + 1] = temp;",
            "            }",
            "        }",
            "    }",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// bubbleSort(arr, n);"
        ]
    },
    "Selection Sort": {
        "prefix": "04-cpp-selection-sort",
        "body": [
            "void selectionSort(int arr[], int n) {",
            "    for (int i = 0; i < n - 1; i++) {",
            "        int minIndex = i;",
            "        for (int j = i + 1; j < n; j++) {",
            "            if (arr[j] < arr[minIndex]) {",
            "                minIndex = j;",
            "            }",
            "        }",
            "        int temp = arr[i];",
            "        arr[i] = arr[minIndex];",
            "        arr[minIndex] = temp;",
            "    }",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// selectionSort(arr, n);"
        ]
    },
    "Insertion Sort": {
        "prefix": "04-cpp-insertion-sort",
        "body": [
            "void insertionSort(int arr[], int n) {",
            "    for (int i = 1; i < n; i++) {",
            "        int key = arr[i];",
            "        int j = i - 1;",
            "        while (j >= 0 && arr[j] > key) {",
            "            arr[j + 1] = arr[j];",
            "            j--;",
            "        }",
            "        arr[j + 1] = key;",
            "    }",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// insertionSort(arr, n);"
        ]
    },
    "Shell Sort": {
        "prefix": "04-cpp-shell-sort",
        "body": [
            "void shellSort(int arr[], int n) {",
            "    for (int gap = n / 2; gap > 0; gap /= 2) {",
            "        for (int i = gap; i < n; i++) {",
            "            int temp = arr[i];",
            "            int j;",
            "            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {",
            "                arr[j] = arr[j - gap];",
            "            }",
            "            arr[j] = temp;",
            "        }",
            "    }",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// shellSort(arr, n);"
        ]
    },
    "Quick Sort": {
        "prefix": "04-cpp-quick-sort",
        "body": [
            "int partition(int arr[], int start, int end) {",
            "    int pivot = arr[end];",
            "    int i = start - 1;",
            "    for (int j = start; j < end; j++) {",
            "        if (arr[j] < pivot) {",
            "            i++;",
            "            int temp = arr[i];",
            "            arr[i] = arr[j];",
            "            arr[j] = temp;",
            "        }",
            "    }",
            "    int temp = arr[i + 1];",
            "    arr[i + 1] = arr[end];",
            "    arr[end] = temp;",
            "    return i + 1;",
            "}",
            "",
            "void quickSort(int arr[], int start, int end) {",
            "    if (start < end) {",
            "        int pivot = partition(arr, start, end);",
            "        quickSort(arr, start, pivot - 1);",
            "        quickSort(arr, pivot + 1, end);",
            "    }",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// quickSort(arr, 0, n - 1);"
        ]
    },
    "Fibonacci Series": {
        "prefix": "04-cpp-fibonacci-series",
        "body": [
            "int fibonacci(int n) {",
            "    if (n <= 1) {",
            "        return n;",
            "    }",
            "    return fibonacci(n - 1) + fibonacci(n - 2);",
            "}",
            "",
            "// Usage:",
            "// int n = 10;",
            "// for (int i = 0; i < n; i++) {",
            "//     cout << fibonacci(i) << \", \";",
            "// }"
        ]
    },
    "Euklides Algorithm": {
        "prefix": "04-cpp-euklides-algorithm",
        "body": [
            "int nwd(int a, int b) {",
            "    if (b == 0) {",
            "        return a;",
            "    }",
            "    return nwd(b, a % b);",
            "}",
            "",
            "// Usage:",
            "// int a = 10, b = 15;",
            "// cout << nwd(a, b);"
        ]
    },
    "Sieve of Eratosthenes": {
        "prefix": "04-cpp-sieve-of-eratosthenes",
        "body": [
            "void sieveOfEratosthenes(int n) {",
            "    bool prime[n + 1];",
            "",
            "    memset(prime, true, sizeof(prime));",
            "",
            "    for (int p = 2; p * p <= n; p++) {",
            "        if (prime[p] == true) {",
            "            for (int i = p * p; i <= n; i += p) {",
            "                prime[i] = false;",
            "            }",
            "        }",
            "    }",
            "",
            "    for (int p = 2; p <= n; p++) {",
            "        if (prime[p]) {",
            "            cout << p << \" \";",
            "        }",
            "    }",
            "}",
            "",
            "// Usage:",
            "// int n = 30;",
            "// sieveOfEratosthenes(n);"
        ]
    },
    "Binary Search": {
        "prefix": "04-cpp-binary-search",
        "body": [
            "int binarySearch(int arr[], int n, int x) {",
            "    int left = 0, right = n - 1;",
            "    while (left <= right) {",
            "        int mid = left + (right - left) / 2;",
            "        if (arr[mid] == x) {",
            "            return mid;",
            "        }",
            "        if (arr[mid] < x) {",
            "            left = mid + 1;",
            "        } else {",
            "            right = mid - 1;",
            "        }",
            "    }",
            "    return -1;",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// int x = 10;",
            "// int result = binarySearch(arr, n, x);"
        ]
    },
    "Linear Search": {
        "prefix": "04-cpp-linear-search",
        "body": [
            "int linearSearch(int arr[], int n, int x) {",
            "    for (int i = 0; i < n; i++) {",
            "        if (arr[i] == x) {",
            "            return i;",
            "        }",
            "    }",
            "    return -1;",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// int x = 10;",
            "// int result = linearSearch(arr, n, x);"
        ]
    },
    "Sentinel Linear Search": {
        "prefix": "04-cpp-sentinel-linear-search",
        "body": [
            "int sentinelLinearSearch(int arr[], int n, int x) {",
            "    int last = arr[n - 1];",
            "    arr[n - 1] = x;",
            "    int i = 0;",
            "    while (arr[i] != x) {",
            "        i++;",
            "    }",
            "    arr[n - 1] = last;",
            "    if (i < n - 1 || arr[n - 1] == x) {",
            "        return i;",
            "    }",
            "    return -1;",
            "}",
            "",
            "// Usage:",
            "// int n = sizeof(arr) / sizeof(arr[0]);",
            "// int x = 10;",
            "// int result = sentinelLinearSearch(arr, n, x);"
        ]
    }
}
